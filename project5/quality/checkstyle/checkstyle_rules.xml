<?xml version="1.0"?><!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<module name="Checker">
    <property name="charset" value="UTF-8" />

    <property name="severity" value="warning" />

    <!-- Checks for whitespace -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true" />
    </module>

    <module name="TreeWalker">
        <module name="ModifierOrder" />

        <!-- Check must have modifiers -->
        <module name="VisibilityModifier">
            <property name="protectedAllowed" value="true" />
        </module>

        <!-- Checks that the order of modifiers conforms to the suggestions -->
        <module name="RedundantModifier">
            <property name="tokens"
                value="METHOD_DEF, VARIABLE_DEF, ANNOTATION_FIELD_DEF, INTERFACE_DEF, CTOR_DEF, CLASS_DEF, ENUM_DEF" />
        </module>

        <!-- Check local variable name -->
        <module name="LocalVariableName">
            <property name="tokens" value="VARIABLE_DEF" />
            <property name="format" value="^[a-z]{1,}$|^[a-z]{1,}+([A-Z][a-z0-9]+){1,}$" />
            <property name="allowOneCharVarInForLoop" value="true" />
            <message key="name.invalidPattern"
                value="Local variable name ''{0}'' must use camelCase or lowercase style." />
        </module>

        <!-- Check global variable name -->
        <module name="MemberName">
            <property name="format" value="^[a-z]{1,}$|^[a-z]{1,}+([A-Z][a-z0-9]+){1,}$" />
            <message key="name.invalidPattern"
                value="Global variable name ''{0}'' must use camelCase style." />
        </module>

        <!-- Check local final variable name -->
        <module name="LocalFinalVariableName">
            <property name="format" value="^[A-Z][A-Z0-9]*$" />
            <message key="name.invalidPattern"
                value="Local final variable name ''{0}'' must be UPPERCASE_WITH_UNDERSCORES style." />
        </module>

        <!-- Check static variable name -->
        <module name="StaticVariableName">
            <property name="format" value="^s([A-Z][a-z0-9]+){1,}$" />
            <message key="name.invalidPattern"
                value="Static variable name ''{0}'' must match pattern 's + upper camelCase' style." />
        </module>

        <!-- Check constant name -->
        <module name="ConstantName">
            <property name="format" value="^[A-Z][A-Z0-9_]*$" />
            <message key="name.invalidPattern"
                value="Constant name ''{0}'' must be UPPERCASE_WITH_UNDERSCORES style." />
        </module>

        <!-- Check interface name
        <module name="TypeName">
            <property name="format" value="^([A-Z][a-z0-9]+){1,}Interface$" />
            <property name="tokens" value="INTERFACE_DEF" />
            <message key="name.invalidPattern"
                value="Interface type name ''{0}'' must match pattern 'ClassName + Interface'." />
        </module>-->

        <!-- Check abstract class name -->
        <module name="AbstractClassName">
            <property name="ignoreModifier" value="false" />
            <property name="format" value="^Base([A-Z][a-z0-9]+){1,}$" />
            <message key="name.invalidPattern"
                value="Abstract class name ''{0}'' must match pattern 'Base + ClassName'." />
        </module>

        <!-- Check method name -->
        <module name="MethodName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$" />
            <property name="allowClassName" value="true" />
            <message key="name.invalidPattern"
                value="Method name ''{0}'' must use camelCase style." />
        </module>

        <!-- Check class member ordering -->
        <module name="DeclarationOrder">
            <property name="ignoreModifiers" value="true" />
        </module>

         <!--Check method length-->
        <module name="MethodLength">
            <property name="tokens" value="METHOD_DEF" />
            <property name="max" value="40" />
        </module>

        <!-- Check line length -->
        <module name="LineLength">
            <property name="max" value="120" />
            <property name="ignorePattern" value="^import " />
        </module>

        <!-- Check avoid star import -->
        <module name="AvoidStarImport" />

        <!-- Checks for braces around code block -->
        <module name="NeedBraces">
            <property name="allowSingleLineStatement" value="true" />
            <property name="tokens"
                value="LITERAL_DO, LITERAL_ELSE, LITERAL_FOR, LITERAL_IF, LITERAL_WHILE" />
        </module>

        <!-- Check left brace go on the same line as the code -->
        <module name="LeftCurly">
            <property name="option" value="eol" />
            <property name="tokens"
                value="INTERFACE_DEF, CLASS_DEF, ANNOTATION_DEF, ENUM_DEF, CTOR_DEF, METHOD_DEF, ENUM_CONSTANT_DEF, LITERAL_WHILE, LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_SYNCHRONIZED, LITERAL_SWITCH, LITERAL_DO, LITERAL_IF, LITERAL_ELSE, LITERAL_FOR" />
        </module>

        <!-- Checks that there are no "magic numbers"
        <module name="MagicNumber" />-->

        <!-- Check missing switch default -->
        <module name="MissingSwitchDefault">
            <property name="severity" value="ignore" />
        </module>

        <!-- Check writespace around operator, variable, ... -->
        <module name="WhitespaceAround" />

        <!-- Check multiline separator between each block -->
        <module name="EmptyLineSeparator">
            <property name="tokens"
                value="PACKAGE_DEF, IMPORT, CLASS_DEF, INTERFACE_DEF, ENUM_DEF, STATIC_INIT, INSTANCE_INIT, METHOD_DEF, CTOR_DEF, VARIABLE_DEF" />
            <property name="allowMultipleEmptyLines" value="false" />
            <property name="allowNoEmptyLineBetweenFields" value="true" />
        </module>

    </module>
</module>